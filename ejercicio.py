# -*- coding: utf-8 -*-
"""ejercicio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xc4we08OQ-djzWk14MbL33ZheMC6mAUl
"""

import pandas as pd #importar paquete para lectura de archivos
import numpy as np #Importar un paquete con funciones para manejo especial de números

from google.colab import files #Dado que este problema se resolvió utilizando Google Colab, se agregó código para cargar archivos en el contexto de este cuaderno de trabajo
uploaded = files.upload() #Se carga el archivo, o bien se indica la ruta para accederlo mediante la función dataset = pd.read_csv(r"Ruta/Al/Archivo.csv", sep=',')  
import io
dataset = pd.read_csv(io.BytesIO(uploaded['datos_prestamoP.csv'])) #Empleando un paquete estándar de E/S se lee el archivo, el cual fue previamente preprocesado utilizando la herramienta WEKA.

dataset.head() #Se visualizan las columnas o atributos del archivo.

X = dataset.iloc[:, 0:12].values  #Se definen y separan las columnas de datos y las etiquetas de clases.
y = dataset.iloc[:, 12].values

from sklearn.model_selection import train_test_split  #Se hace la partición de los datos, para esto se emplea el paquete de sklearn
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=1, random_state=0)  #se hace la división

from sklearn.preprocessing import StandardScaler   #Se hace uso de un método de normalización para escalar todos los datos
feature_scaler = StandardScaler()  
X_train = feature_scaler.fit_transform(X_train)  
X_test = feature_scaler.transform(X_test)

from sklearn.ensemble import RandomForestClassifier  #Se elige el clasificador RandomForest ya que se ha observado que es muy efectivo en problemas de clasificación. 
classifier = RandomForestClassifier(n_estimators=300, random_state=0)

from sklearn.model_selection import cross_val_score  #Se validará el desempeño del clasificador con K-Fold Cross-Validation con K=10
all_accuracies = cross_val_score(estimator=classifier, X=X_train, y=y_train, cv=10)  #Por cada Fold se genera un resultado, en particular el accuracy. Este resultado mide la tasa de aciertos en clasificación

print(all_accuracies)  #Se imprimen en pantalla los resultados de las pruebas por cada Fold

print(all_accuracies.mean()) #Se calcula el promedio de los 10 resultados.

